<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="proc_std_working_day_auto" directorySegmentName="seg_0" id="9D88B313-5C81-FE15-BB89-18CE25ECD6B5">
<createdBy>leads</createdBy>
<createdTime>2022-05-14 08:07:30 UTC</createdTime>
<ownerDesignName>school_management_datamodel</ownerDesignName>
<source>CREATE OR REPLACE PROCEDURE proc_std_working_day_auto AS
    ---variable 
    v_count  NUMBER;
    v_count1 NUMBER;

    ---year date
    CURSOR cur_working_day IS
    SELECT
        scs.school_code AS school_code,
        scs.batch_no# AS batch_no,
        scs.class_code AS class_code,
        scs.section_code AS section_code,
        scs.student_id AS student_id,
        ydt.day AS year_date,
        CASE
            WHEN ydt.day BETWEEN sess.effective_from AND sess.effective_upto THEN
                &apos;WORKING DAY&apos;
            ELSE
                &apos;NON-WORKING DAY&apos;
        END AS day_type,
        CASE
            WHEN ydt.day BETWEEN sess.effective_from AND sess.effective_upto THEN
                &apos;012&apos;
            ELSE
                &apos;003&apos;
        END AS event_code,
        CASE
            WHEN ydt.day BETWEEN sess.effective_from AND sess.effective_upto THEN
                &apos;Working Day&apos;
            ELSE
                &apos;School Holiday&apos;
        END AS event_name,
        &apos;NO&apos; AS special_type,
        &apos;ACTIVE&apos; AS status_name,
        &apos;ENTERED BY MACHINE&apos; AS descriptions
    FROM
             student std
        INNER JOIN std_class_sec scs
        ON ( scs.school_code = std.school_code
             AND scs.student_id = std.id )
        INNER JOIN school_batch sbat
        ON ( sbat.school_code = scs.school_code
             AND sbat.batch_no# = scs.batch_no# )
        INNER JOIN school_session sess
        ON ( sess.school_code = sbat.school_code
             AND sess.batch_no# = sbat.batch_no#
             AND sess.class_code = scs.class_code )
        CROSS JOIN year_date ydt
    WHERE
        ydt.day BETWEEN sbat.effective_from AND sbat.effective_upto
        AND scs.batch_no# = trunc(sysdate, &apos;year&apos;)
    ORDER BY
        school_code,
        batch_no,
        class_code,
        section_code,
        student_id,
        year_date;

    ----std_working_day
    CURSOR cur_std_working_day (
        p_school_code  VARCHAR2,
        p_batch_no     DATE,
        p_class_code   VARCHAR2,
        p_section_code VARCHAR2,
        p_student_id   VARCHAR2,
        p_year_date    DATE
    ) IS
    SELECT
        COUNT(1)
    FROM
        std_working_day
    WHERE
            school_code = p_school_code
        AND batch_no# = p_batch_no
        AND class_code = p_class_code
        AND section_code = p_section_code
        AND student_id = p_student_id
        AND year_date = p_year_date
    HAVING
        COUNT(1) &gt; 0;
        
        
    ---update cursor
    CURSOR cur_update (
        p_school_code VARCHAR2,
        p_batch_no    DATE,
        p_class_code  VARCHAR2,
        p_year_date   DATE
    ) IS
    SELECT
        COUNT(1)
    FROM
             school_batch sbat
        INNER JOIN school_session sess
        ON ( sess.school_code = sbat.school_code
             AND sess.batch_no# = sbat.batch_no# )
    WHERE
        p_year_date BETWEEN sess.effective_from AND sess.effective_upto
        AND sbat.school_code = p_school_code
        AND sbat.batch_no# = p_batch_no
        AND sess.class_code = p_class_code
    HAVING
        COUNT(1) &gt; 0;
BEGIN
    FOR indx IN cur_working_day LOOP
        OPEN cur_std_working_day(p_school_code =&gt; indx.school_code, p_batch_no =&gt; indx.batch_no, p_class_code =&gt; indx.class_code, p_section_code =&gt; indx.section_code, p_student_id =&gt; indx.student_id,
                                p_year_date =&gt; indx.year_date);
        FETCH cur_std_working_day INTO v_count;

        ---insert
        IF cur_std_working_day%notfound THEN
            INSERT INTO std_working_day (
                school_code,
                batch_no#,
                class_code,
                section_code,
                student_id,
                year_date,
                day_type,
                event_code,
                event_name,
                special_type,
                status_name,
                descriptions
            ) VALUES (
                indx.school_code,
                indx.batch_no,
                indx.class_code,
                indx.section_code,
                indx.student_id,
                indx.year_date,
                indx.day_type,
                indx.event_code,
                indx.event_name,
                indx.special_type,
                indx.status_name,
                indx.descriptions
            );
        END IF;
        
        ---update
        IF cur_std_working_day%found THEN
            OPEN cur_update(p_school_code =&gt; indx.school_code, p_batch_no =&gt; indx.batch_no, p_class_code =&gt; indx.class_code, p_year_date =&gt; indx.year_date);
            FETCH cur_update INTO v_count1;
            
            ---update &apos;NON-WORKING DAY&apos;
            IF cur_update%notfound THEN
                UPDATE std_working_day
                SET
                    day_type = indx.day_type,
                    event_code = indx.event_code,
                    event_name = indx.event_name
                WHERE
                        school_code = indx.school_code
                    AND batch_no# = indx.batch_no
                    AND class_code = indx.class_code
                    AND section_code = indx.section_code
                    AND student_id = indx.student_id
                    AND year_date = indx.year_date;
            END IF;
            CLOSE cur_update;
        END IF;
        CLOSE cur_std_working_day;
    END LOOP;
END proc_std_working_day_auto;</source>
</StoredProcedureOraclev10g>