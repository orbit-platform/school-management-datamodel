<?xml version = '1.0' encoding = 'UTF-8'?>
<StoredProcedureOraclev10g class="oracle.dbtools.crest.model.design.storage.oracle.v10g.StoredProcedureOraclev10g" name="proc_school_term_auto" directorySegmentName="seg_0" id="20FF6832-8459-228B-7182-52FE96B1813C">
<createdBy>leads</createdBy>
<createdTime>2021-06-10 12:23:35 UTC</createdTime>
<ownerDesignName>school_management_datamodel</ownerDesignName>
<source>CREATE OR REPLACE PROCEDURE proc_school_term_auto AS

    ---variables
    v_school_code     school_term.school_code%TYPE;
    v_batch_no        school_term.batch_no#%TYPE;
    v_class_code      school_term.class_code%TYPE;
    v_term_code       school_term.term_code%TYPE;
    v_serial_no       school_term.serial_no%TYPE;
    v_effective_from  school_term.effective_from%TYPE;
    v_effective_upto  school_term.effective_upto%TYPE;
    v_status_name     school_term.status_name%TYPE;
    CURSOR cur IS
    SELECT
        st.school_code,
        add_months(st.batch_no#, 12) AS batch_no#,
        st.class_code,
        st.term_code,
        st.serial_no,
        add_months(st.effective_from, 12) AS effective_from,
        add_months(st.effective_upto, 12) AS effective_upto,
        st.status_name
    FROM
             ( SELECT
              school_code,
              MAX(batch_no#) AS batch_no#
          FROM
              school_term
          WHERE
                  status_name = &apos;ACTIVE&apos;
          GROUP BY
              school_code
        ) v
        INNER JOIN school_term st ON ( st.school_code = v.school_code
                                       AND st.batch_no# = v.batch_no# )
    WHERE
        st.status_name = &apos;ACTIVE&apos;;

    CURSOR cur_school_term (
        p_school_code  VARCHAR2,
        p_batch_no     DATE,
        p_class_code   VARCHAR2,
        p_term_code    VARCHAR2
    ) IS
    SELECT
        school_code,
        batch_no#,
        class_code,
        term_code,
        serial_no,
        effective_from,
        effective_upto,
        status_name
    FROM
        school_term
    WHERE
            school_code = p_school_code
        AND batch_no# = p_batch_no
        AND class_code = p_class_code
        AND term_code = p_term_code;

BEGIN
    FOR indx IN cur LOOP
        OPEN cur_school_term(p_school_code =&gt; indx.school_code, p_batch_no =&gt; indx.batch_no#, p_class_code =&gt; indx.class_code, p_term_code =&gt; indx.term_code);

        FETCH cur_school_term INTO
            v_school_code,
            v_batch_no,
            v_class_code,
            v_term_code,
            v_serial_no,
            v_effective_from,
            v_effective_upto,
            v_status_name;
        IF cur_school_term%notfound THEN
            INSERT INTO school_term (
                school_code,
                batch_no#,
                class_code,
                term_code,
                serial_no,
                effective_from,
                effective_upto,
                status_name
            ) VALUES (
                indx.school_code,
                indx.batch_no#,
                indx.class_code,
                indx.term_code,
                indx.serial_no,
                indx.effective_from,
                indx.effective_upto,
                indx.status_name
            );

        END IF;

        CLOSE cur_school_term;
    END LOOP;
END;</source>
</StoredProcedureOraclev10g>