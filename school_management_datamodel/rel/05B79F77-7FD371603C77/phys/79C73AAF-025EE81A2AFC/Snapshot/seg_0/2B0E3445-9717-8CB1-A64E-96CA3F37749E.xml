<?xml version = '1.0' encoding = 'UTF-8'?>
<SnapshotOraclev11g class="oracle.dbtools.crest.model.design.storage.oracle.v11g.SnapshotOraclev11g" name="mvc_marksheet_cl1" directorySegmentName="seg_0" id="2B0E3445-9717-8CB1-A64E-96CA3F37749E">
<createdBy>leads</createdBy>
<createdTime>2021-12-07 03:32:36 UTC</createdTime>
<ownerDesignName>school_management_datamodel</ownerDesignName>
<defaultSegment>YES</defaultSegment>
<nextDate>sysdate + 60 * 24 * 120 /1440</nextDate>
<refresh>YES</refresh>
<refreshType>FORCE</refreshType>
<startDate>sysdate</startDate>
<subquery><![CDATA[SELECT
    wd.school_code,
    wd.batch_no,
    wd.class_code,
    wd.section_code,
    wd.term_code,
    wd.student_id,
    part_name,
    ranking_type,
    academic_code,
    category_code,
    wd.domain_code,
    wd.super_code,
    wd.subject_code,
    domain,
    nvl2(domain, nvl2(subject, subject, 'Aggregate (' || super_subject || ')'), 'Grand Aggregate') AS subject,
    main_max_mark,
    inter_max_mark,
    total_max_mark,
    main_pass_mark,
    inter_pass_mark,
    total_pass_mark,
    nvl(main_mark_obtained, '-ab-') AS main_mark_obtained,
    v_main_mark_obtained,
    decode(examination_type, 'INTERNAL', nvl(inter_mark_obtained, '-ab-'), NULL, nvl(inter_mark_obtained, '-na-')) AS inter_mark_obtained,
    v_inter_mark_obtained,
    nvl(total_mark_obtained, '-ab-') AS total_mark_obtained,
    v_total_mark_obtained,
    decode(status, 'FAILED', nvl(ovf.name, 'FAILED'), status) AS status,
    percentage
FROM
    ( SELECT
          school_code,
          batch_no,
          class_code,
          section_code,
          term_code,
          student_id,
          domain_code,
          ranking_type,
          part_name,
          academic_code,
          category_code,
          domain,
          super_code,
          super_subject,
          subject_code,
          subject,
          round(main_max_mark) AS main_max_mark,
          nvl(to_char(round(inter_max_mark)), '-na-') AS inter_max_mark,
          round(total_max_mark) AS total_max_mark,
          round(main_pass_mark) AS main_pass_mark,
          nvl(to_char(round(inter_pass_mark)), '-na-') AS inter_pass_mark,
          round(total_pass_mark) AS total_pass_mark,
          (
              CASE
                  WHEN score_type = 'GRADE' THEN
                      func_std_grade(p_school_code => school_code, p_class_code => class_code, p_mark_obtained => main_mark_obtained, p_max_mark => main_max_mark)
                  ELSE
                      to_char(round(main_mark_obtained))
              END
          ) AS main_mark_obtained,
          round(main_mark_obtained) AS v_main_mark_obtained,
          (
              CASE
                  WHEN score_type = 'GRADE' THEN
                      func_std_grade(p_school_code => school_code, p_class_code => class_code, p_mark_obtained => inter_mark_obtained, p_max_mark => inter_max_mark)
                  ELSE
                      to_char(round(inter_mark_obtained))
              END
          ) AS inter_mark_obtained,
          round(inter_mark_obtained) AS v_inter_mark_obtained,
          (
              CASE
                  WHEN score_type = 'GRADE' THEN
                      func_std_grade(p_school_code => school_code, p_class_code => class_code, p_mark_obtained => total_mark_obtained, p_max_mark => total_max_mark)
                  ELSE
                      to_char(round(total_mark_obtained))
              END
          ) AS total_mark_obtained,
          round(total_mark_obtained) AS v_total_mark_obtained,
          (
              CASE
                  WHEN ranking_type = 'YES' THEN
                      (
                          CASE
                              WHEN REGEXP_LIKE ( overall_status,
                                                 'PASSED' )
                                   AND grp_academic_code = 0
                                   AND grp_category_code = 1
                                   AND grp_domain = 1
                                   AND grp_domain_code = 1
                                   AND grp_score_type = 0
                                   AND grp_optional_type = 1
                                   AND grp_ranking_type = 0
                                   AND grp_part_name = 0
                                   AND grp_super_code = 1
                                   AND grp_subject_code = 1
                                   AND grp_subject = 1 THEN
                                  func_std_division(p_school_code => wd.school_code, p_batch_no => wd.batch_no, p_term_code => wd.term_code, p_class_code => wd.class_code, p_student_id => wd.student_id,
                                                   p_mark_obtained => total_mark_obtained, p_max_mark => total_max_mark)
                              WHEN overall_status = 'FAILED'
                                   AND grp_academic_code = 0
                                   AND grp_category_code = 1
                                   AND grp_domain = 1
                                   AND grp_domain_code = 1
                                   AND grp_score_type = 0
                                   AND grp_optional_type = 1
                                   AND grp_ranking_type = 0
                                   AND grp_part_name = 0
                                   AND grp_super_code = 1
                                   AND grp_subject_code = 1
                                   AND grp_subject = 1 THEN
                                  'FAILED'
                              ELSE
                                  (
                                      CASE
                                          WHEN round(nvl(main_mark_obtained, 0)) >= round(main_pass_mark)
                                               AND round(nvl(total_mark_obtained, 0)) >= round(total_pass_mark) THEN
                                              'PASSED'
                                          WHEN round(nvl(main_mark_obtained, 0)) < round(main_pass_mark)
                                               OR round(nvl(total_mark_obtained, 0)) < round(total_pass_mark) THEN
                                              'FAILED'
                                      END
                                  )
                          END
                      )
              END
          ) AS status,
          nvl(to_char(total_mark_obtained / total_max_mark * 100, 'fm999d00'), '-') AS percentage
      FROM
          ( SELECT
                school_code,
                batch_no,
                class_code,
                section_code,
                term_code,
                student_id,
                overall_status,
                part_name,
                ranking_type,
                academic_code,
                category_code,
                domain_code,
                domain,
                super_code,
                super_subject,
                subject_code,
                subject,
                score_type,
                optional_type,
                SUM(mark_obtained) AS mark_obtained,
                SUM(pass_mark) AS pass_mark,
                SUM(max_mark) AS max_mark,
                GROUPING(part_name) AS grp_part_name,
                GROUPING(ranking_type) AS grp_ranking_type,
                GROUPING(academic_code) AS grp_academic_code,
                GROUPING(category_code) AS grp_category_code,
                GROUPING(domain) AS grp_domain,
                GROUPING(domain_code) AS grp_domain_code,
                GROUPING(super_code) AS grp_super_code,
                GROUPING(super_subject) AS grp_super_subject,
                GROUPING(subject_code) AS grp_subject_code,
                GROUPING(subject) AS grp_subject,
                GROUPING(score_type) AS grp_score_type,
                GROUPING(optional_type) AS grp_optional_type,
                CASE
                    WHEN GROUPING(examination_type) = 1 THEN
                        'TOTAL'
                    ELSE
                        examination_type
                END AS examination_type
            FROM
                mvc_std_score mv
            WHERE
                    class_code = '0005'
                AND batch_no = trunc(sysdate - 90, 'year')
            GROUP BY
                school_code,
                batch_no,
                class_code,
                section_code,
                term_code,
                student_id,
                overall_status,
                CUBE(part_name,
                     ranking_type,
                     academic_code,
                     category_code,
                     domain,
                     domain_code,
                     super_code,
                     super_subject,
                     subject_code,
                     subject,
                     score_type,
                     optional_type,
                     examination_type)
          ) PIVOT (
              SUM ( mark_obtained )
          AS mark_obtained, SUM ( pass_mark ) AS pass_mark, SUM ( max_mark ) AS max_mark
              FOR examination_type
              IN ( 'EXTERNAL' AS main, 'INTERNAL' AS inter, 'TOTAL' AS total )
          )
          wd
      WHERE
          (
              CASE
                  WHEN grp_part_name = 0
                       AND grp_ranking_type = 0
                       AND grp_academic_code = 0
                       AND grp_category_code = 0
                       AND grp_domain = 0
                       AND grp_domain_code = 0
                       AND grp_super_code = 0
                       AND grp_super_subject = 0
                       AND grp_subject_code = 0
                       AND grp_subject = 0
                       AND grp_score_type = 0
                       AND grp_optional_type = 0 THEN
                      1
                  WHEN ranking_type = 'YES'
                       AND grp_part_name = 0
                       AND grp_ranking_type = 0
                       AND grp_academic_code = 0
                       AND grp_category_code = 1
                       AND grp_domain = 1
                       AND grp_domain_code = 1
                       AND grp_super_code = 1
                       AND grp_super_subject = 1
                       AND grp_subject_code = 1
                       AND grp_subject = 1
                       AND grp_score_type = 0
                       AND grp_optional_type = 1 THEN
                      1
                  WHEN ranking_type = 'YES'
                       AND grp_part_name = 0
                       AND grp_ranking_type = 0
                       AND grp_academic_code = 0
                       AND grp_category_code = 0
                       AND grp_domain = 0
                       AND grp_domain_code = 0
                       AND grp_super_code = 0
                       AND grp_super_subject = 0
                       AND grp_subject_code = 1
                       AND grp_subject = 1
                       AND grp_score_type = 0
                       AND grp_optional_type = 0
                       AND EXISTS ( SELECT
                                   ssubj.super_code
                               FROM
                                        school_subject ssubj
                                   INNER JOIN class_subject csubj
                                   ON ( csubj.school_code = ssubj.school_code
                                        AND csubj.batch_no# = ssubj.batch_no#
                                        AND csubj.class_code = ssubj.class_code
                                        AND csubj.subject_code = ssubj.subject_code )
                               WHERE
                                       ssubj.status_name = 'ACTIVE'
                                   AND csubj.status_name = 'ACTIVE'
                                   AND ssubj.school_code = wd.school_code
                                   AND ssubj.class_code = wd.class_code
                                   AND csubj.batch_no# = wd.batch_no
                                   AND csubj.term_code = wd.term_code
                                   AND ssubj.super_code = wd.super_code
                               GROUP BY
                                   ssubj.super_code
                               HAVING
                                   COUNT(1) > 1
                                  ) THEN
                      1
              END
          ) = 1
    ) wd
    LEFT OUTER JOIN overall_failed ovf
    ON ( ovf.status_name = 'ACTIVE'
         AND ovf.school_code = wd.school_code
         AND ovf.batch_no# = wd.batch_no
         AND ovf.class_code = wd.class_code
         AND ovf.term_code = wd.term_code )
    LEFT OUTER JOIN ( SELECT
                          school_code,
                          batch_no# AS batch_no,
                          class_code,
                          term_code,
                          student_id,
                          super_code,
                          examination_type
                      FROM
                          std_score_alloc
                      WHERE
                              status_name = 'ACTIVE'
                          AND examination_type = 'INTERNAL'
                      GROUP BY
                          school_code,
                          batch_no#,
                          class_code,
                          term_code,
                          student_id,
                          super_code,
                          examination_type
                    ) z
    ON ( z.school_code = wd.school_code
         AND z.batch_no = wd.batch_no
         AND z.class_code = wd.class_code
         AND z.term_code = wd.term_code
         AND z.student_id = wd.student_id
         AND z.super_code = wd.super_code )]]></subquery>
<subqueryNeedsMigration>false</subqueryNeedsMigration>
<with>ROWID</with>
</SnapshotOraclev11g>